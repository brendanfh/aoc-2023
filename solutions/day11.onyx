use core {*}

SCALE :: cast(i64) 999999

expand :: (board: [..] [..] u8, expand_rows: &[..] i32, expand_cols: &[..] i32) {
    for i: board.length {
        if slice.every(board.data[i], [x](x == '.')) {
            array.push(expand_rows, i);
        }
    }

    for i: board[0].length {
        duplicate := iter.as_iter(board) |> iter.every((row, [i]) => row[i] == '.');
        
        if duplicate {
            array.push(expand_cols, i);
        }
    }
}

Pos :: [2] i32

manhattan_dist :: (a, b: Pos) -> i32 {
    return math.abs(a.x - b.x) + math.abs(a.y - b.y);
}

galaxy_positions :: (board: [..] [..] u8) -> Iterator(Pos) {
    return iter.zip(
        iter.prod(0 .. board[0].length, iter.counter()),
        iter.flat_map(iter.as_iter(board), x => iter.as_iter(x))
    )
    |> iter.filter(x => x.second == '#')
    |> iter.map(x => i32.[x.first.first, x.first.second]);
}

main :: () {
    board := os.get_contents("inputs/day11.txt")
        |> string.split_iter("\n")
        |> iter.map(x => array.make(x))
        |> iter.collect();

    expand_rows, expand_cols: [..] i32;
    expand(board, &expand_rows, &expand_cols);
    galaxies := galaxy_positions(board) |> iter.collect();

    sum: i64;
    for i: 0 .. galaxies.length {
        for j: i+1 .. galaxies.length {
            alloc.clear_temp_allocator();
            
            gi := galaxies[i];
            gj := galaxies[j];

            min_x := math.min(gi.x, gj.x);
            min_y := math.min(gi.y, gj.y);
            max_x := math.max(gi.x, gj.x);
            max_y := math.max(gi.y, gj.y);

            ec := iter.as_iter(expand_cols) |> iter.count((x, [min_x, max_x]) => min_x <= x && x < max_x);
            er := iter.as_iter(expand_rows) |> iter.count((y, [min_y, max_y]) => min_y <= y && y < max_y);

            dist := cast(i64) manhattan_dist(gi, gj) + cast(i64) ec * SCALE + cast(i64) er * SCALE;
            sum += dist;
        }
    }

    println(sum);
}